import numpy as np

#load data
#change this to the normalised baseline array
F= np.load('C:/Users/nguye/Documents/Hyperstim/suite2p_tiff6/suite2p/plane0/F.npy', allow_pickle= True)
iscell = np.load('C:/Users/nguye/Documents/Hyperstim/suite2p_tiff6/suite2p/plane0/iscell.npy', allow_pickle=True)

#define constant values
#breaking file down to blocks-----------------
#define time block duration in frames
time_block = 217 #1085
frame_rate = 31
baseline_duration = 300 #ms
start_timepoints = [0.31] # ms  #gives the start of the stimulations --> 5 trials calculating from here

#trial info
stimulation_duration = 1 #s
resting_period = 2 #s
num_trials = 5

#conv s to frames
stim_dur_f = int(stimulation_duration * frame_rate)
rest_dur_f = int(resting_period * frame_rate)

#calc the stim start timepoints for each trial
trial_start_times = []
trial_ind = []

#calc start_timepoints
for trial, start_timepoint in enumerate(start_timepoints):
    start_index = int(start_timepoint * frame_rate) + trial * int((stimulation_duration + resting_period) * frame_rate)
    end_index = start_index + (stim_dur_f + rest_dur_f)
    trial_ind.append((start_index, end_index))
    trial_start_times.append(start_index)

print(trial_start_times)

# Calculate tiff trigger start and end tuples
num_tif_triggers = int(len(F[0]) / time_block) 
tif_triggers = []
for i in range(num_tif_triggers):
    start_time = i * time_block
    end_time = start_time + time_block
    tif_triggers.append((start_time, end_time))
print(tif_triggers) 

#breaking file down to blocks-----------------

#calculating threshold & baseline (?)-----------
#lists to store results for EACH roi
stim_results_roi = []
rest_results_roi = []
'''
threshold_list = []
stim_result_list = []
rest_result_list = []
'''
##iterating through each roi
#for cell_index, (fluo_trace, (iscell_value, _)) in enumerate(zip(F, iscell)):
for fluo_trace, (iscell_value, _) in zip(F, iscell):
    #list to store results for ONE roi
    stim_result_list = []
    rest_result_list = []
    '''
    roi_thresholds = []
    roi_results = [] 
    stim_avgs = []
    rest_avgs = []
    '''
    ##iterate through each timeblock (tiff files)             
    #for i, tif_trigger in enumerate(tif_triggers):
    for start_frame, end_frame in tif_triggers:
        #start_frame, end_frame = tif_trigger
#calculating threshold & baseline-----------    
        baseline_dur = fluo_trace[start_frame: start_frame + baseline_duration]
        # Calculate baseline avg
        baseline_avg = np.mean(baseline_dur)
        # Calculate standard deviation for the baseline trace
        baseline_std = np.std(baseline_dur) 
        # Calculate threshold for the current tuple
        threshold = baseline_std * 3 + baseline_avg
        # append threshold to the list for the current ROI
        #roi_thresholds.append(threshold)
        
        ##lists to store results for each trial within the block
        stim_trial_results = []
        rest_trial_results = []
        ##iterate through each trial within the block
        for i, stim_start_time in enumerate(trial_start_times):
            #calculating indices for this trial
            start_ind = start_frame + int(stim_start_time* frame_rate)
            end_index_1s = start_frame + int((stim_start_time +1)* frame_rate)
            end_index_3s = start_frame + int((stim_start_time +3)* frame_rate)
            #slice traces to extract stim # rest periods
            trace_stim = fluo_trace[start_ind:end_index_1s]
            trace_rest = fluo_trace[end_index_1s:end_index_3s]
            #calculate averages
            #print(trace_stim)
            avg_stim = np.mean(trace_stim)
            avg_rest = np.mean(trace_rest)
            #threshold condition check
            #print(avg_stim, threshold)
            stim_above_thr = int(avg_stim > threshold)  
            rest_above_thr = int(avg_rest > threshold)
            #append results for this trial
            stim_trial_results.append(stim_above_thr)
            rest_trial_results.append(rest_above_thr)
        #append results for this block
        stim_result_list.append(stim_trial_results)
        rest_result_list.append(rest_trial_results)
    #append results for this roi
    stim_results_roi.append(stim_result_list)
    rest_results_roi.append(rest_result_list)
                     
''' 
#printing the results for each roi
for roi_index, (stim_results, rest_results) in enumerate(zip(stim_results_roi, rest_results_roi)):
    print(f"Results for ROI {roi_index}:")
    for block_index, (stim_block_results, rest_block_results) in enumerate(zip(stim_results, rest_results)):
        print(f"Time Block {block_index +1 }:")
        for trial_index, (stim_trial_result, rest_trial_result) in enumerate(zip(stim_block_results, rest_block_results)):
            print(f"Trial {trial_index +1}: Stim Above Threshold: {stim_trial_result}, Rest Above Threshold: {rest_trial_result}")
'''    
