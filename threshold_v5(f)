#roi_thresholds list, roi_results--> thr values for each tuple, exceedence check results
#each roi: roi_thresholds list, roi_results list--> stores the threshold values for each tuple, stores the results of the exceedance check for each tuple.
#lists: appended to threshold_list and results_list--> which store the threshold values and results for all rois
#threshold_list and results_list--> converted & saved to npy

import os
import numpy as np


##------interval_calc-------
'''
F = np.load('C:GCaMP6f/2023_09_25/suite2p/plane0/F.npy', allow_pickle = True)
total_duration = len(F[0])
num_intervals = 5
interval_time = total_duration /num_intervals
print(interval_time)
'''
##------interval_calc-------

# Load the fluorescence traces and iscell array
F = np.load('C:GCaMP6f/2023_09_25/suite2p/plane0/F.npy', allow_pickle=True)
iscell = np.load('C:GCaMP6f/2023_09_25/suite2p/plane0/iscell.npy', allow_pickle=True)

output_dir = '../Hyperstim_Eszter/GCaMP6f/2023_09_25/'

# Define time block duration in frames
time_block = 1085

# Calculate tiff trigger start and end tuples
num_tif_triggers = int(len(F[0]) / time_block)
tif_triggers = []

for i in range(num_tif_triggers):
    start_time = i * time_block
    end_time = start_time + time_block
    tif_triggers.append((start_time, end_time))
print(tif_triggers) 

# Define baseline duration
baseline_duration = 310  # Duration in milliseconds
exceed_values = []
# Create an empty list to store threshold values for each ROI and tuple
threshold_list = []
# Create an empty list to store results for each ROI and tuple
results_list = []
# Iterate through all ROIs
for cell_index, (fluorescence_trace, (iscell_value, _)) in enumerate(zip(F, iscell)):
    roi_thresholds = []
    roi_results = [] 
    # Iterate through all tiff triggers
    for tif_trigger in tif_triggers:
        # Extract start and end time stamps for the current tuple
        start_time, end_time = tif_trigger
        # Create lists to store threshold and results for the current ROI
        baseline_dur = fluorescence_trace[start_time:start_time + baseline_duration] 
        # Calculate average for baseline
        baseline_avg = np.mean(baseline_dur)
        # Calculate standard deviation for the baseline trace
        baseline_std = np.std(baseline_dur) 
        # Calculate threshold for the current tuple
        threshold = baseline_std * 9 + baseline_avg
        # append threshold to the list for the current ROI
        roi_thresholds.append(threshold)
        # check if fluorescence exceeds threshold for the current tuple
        exceed_threshold = any(value > threshold for value in fluorescence_trace[start_time+baseline_duration:end_time])
        # append result (1 or 0) to the list for the current ROI
        roi_results.append(int(exceed_threshold))
    # append threshold values and results for the current ROI to the overall lists
    threshold_list.append(roi_thresholds)
    results_list.append(roi_results)
'''
        # Calculate baseline traces for the current tuple
        #fluo_trace = fluorescence_trace[start_time:end_time]
        #print(fluo_trace)

        #print(threshold)

'''
# Convert the lists of threshold values and results to NumPy arrays
threshold_array = np.array(threshold_list)
results_array = np.array(results_list) 

# Save the results to a .txt file
output_file = os.path.join(output_dir, 'threshold_base_test.txt')
with open(output_file, 'w' ) as f:
    for roi_i, (roi_r,(iscell,_)) in enumerate(zip(results_list, iscell)):
        if iscell ==1:
            f.write(f'roi: {roi_i } : {roi_r}\n')
    print("txt saved") 
